"use strict";
const FlowerBusiness = require("./../app/business/FlowerBusiness");
class FlowerController {
    create(req, res) {
        console.log(req.body);
        try {
            const flower = req.body;
            const flowerBusiness = new FlowerBusiness();
            flowerBusiness.create(flower, (error, result) => {
                if (error) {
                    console.log('error in db add');
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send({ 'success': 'success' });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    update(req, res) {
        try {
            const hero = req.body;
            const _id = req.params._id;
            const flowerBusiness = new FlowerBusiness();
            flowerBusiness.update(_id, hero, (error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send({ 'success': 'success' });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    delete(req, res) {
        try {
            const _id = req.params._id;
            const flowerBusiness = new FlowerBusiness();
            flowerBusiness.delete(_id, (error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send({ 'success': 'success' });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    retrieve(req, res) {
        try {
            const flowerBusiness = new FlowerBusiness();
            flowerBusiness.retrieve((error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send(result);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    findById(req, res) {
        try {
            const _id = req.params._id;
            const flowerBusiness = new FlowerBusiness();
            flowerBusiness.findById(_id, (error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send(result);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
}
module.exports = FlowerController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
