"use strict";
const SpartanBusiness = require("./../app/business/SpartanBusiness");
class SpartanController {
    create(req, res) {
        try {
            var spartan = req.body;
            var spartanBusiness = new SpartanBusiness();
            spartanBusiness.create(spartan, (error, result) => {
                if (error)
                    res.send({ "error": "error" });
                else
                    res.send({ "success": "success" });
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    }
    update(req, res) {
        try {
            var spartan = req.body;
            var _id = req.params._id;
            var spartanBusiness = new SpartanBusiness();
            spartanBusiness.update(_id, spartan, (error, result) => {
                if (error)
                    res.send({ "error": "error" });
                else
                    res.send({ "success": "success" });
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    }
    delete(req, res) {
        try {
            var _id = req.params._id;
            var spartanBusiness = new SpartanBusiness();
            spartanBusiness.delete(_id, (error, result) => {
                if (error)
                    res.send({ "error": "error" });
                else
                    res.send({ "success": "success" });
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    }
    retrieve(req, res) {
        try {
            var spartanBusiness = new SpartanBusiness();
            spartanBusiness.retrieve((error, result) => {
                if (error)
                    res.send({ "error": "error" });
                else
                    res.send(result);
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    }
    findById(req, res) {
        try {
            var _id = req.params._id;
            var spartanBusiness = new SpartanBusiness();
            spartanBusiness.findById(_id, (error, result) => {
                if (error)
                    res.send({ "error": "error" });
                else
                    res.send(result);
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    }
}
module.exports = SpartanController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
