"use strict";
const ClassifiedImageBusiness = require("./../app/business/ClassifiedImageBusiness");
const multer = require('multer');
// multer settings for single upload
// TODO set max upload size
const upload = multer({
    dest: './tempUploads'
}).single('file');
class ClassifiedImageController {
    create(req, res) {
        console.log('this is the req.body'); // req.body);
        try {
            // const classifiedImage: IClassifiedImageModel = <IClassifiedImageModel>req.body;
            const classifiedImageBusiness = new ClassifiedImageBusiness();
            // use multer to upload
            upload(req, res, (uploadError) => {
                if (uploadError) {
                    console.log('multer error');
                }
                classifiedImageBusiness.create(req, (error, result) => {
                    if (error) {
                        console.log('error in image db add');
                        res.send({ 'error': 'error' });
                    }
                    else {
                        res.send({ 'success': 'success' });
                    }
                });
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    update(req, res) {
        try {
            const classifiedImage = req.body;
            const _id = req.params._id;
            const classifiedImageBusiness = new ClassifiedImageBusiness();
            classifiedImageBusiness.update(_id, classifiedImage, (error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send({ 'success': 'success' });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    delete(req, res) {
        try {
            const _id = req.params._id;
            const classifiedImageBusiness = new ClassifiedImageBusiness();
            classifiedImageBusiness.delete(_id, (error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send({ 'success': 'success' });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    retrieve(req, res) {
        try {
            const classifiedImageBusiness = new ClassifiedImageBusiness();
            classifiedImageBusiness.retrieve((error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send(result);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    findById(req, res) {
        try {
            const _id = req.params._id;
            const classifiedImageBusiness = new ClassifiedImageBusiness();
            classifiedImageBusiness.findById(_id, (error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send(result);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
}
module.exports = ClassifiedImageController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
