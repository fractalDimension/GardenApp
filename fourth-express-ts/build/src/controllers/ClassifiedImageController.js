"use strict";
const ClassifiedImageBusiness = require("./../app/business/ClassifiedImageBusiness");
class ClassifiedImageController {
    create(req, res, next) {
        console.log('classify controller create'); // req.body);
        try {
            const classifiedImageBusiness = new ClassifiedImageBusiness();
            classifiedImageBusiness.create(req, (error, result) => {
                if (error) {
                    console.log('error in image db add');
                    res.send({ 'error': 'error' });
                }
                else {
                    console.log('save success');
                    // store the saved doc id in the response for the next middleware to use
                    res.locals._id = result._id;
                    next();
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    classify(req, res) {
        console.log('controller classify');
        try {
            const classifiedImageBusiness = new ClassifiedImageBusiness();
            classifiedImageBusiness.classify(res, (error, result) => {
                if (error) {
                    console.log('error in image classify');
                    res.send({ 'error': 'error' });
                }
                else {
                    console.log('classify success!!');
                    res.send({ 'success': 'success' });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    update(req, res) {
        try {
            const classifiedImage = req.body;
            const _id = req.params._id;
            const classifiedImageBusiness = new ClassifiedImageBusiness();
            classifiedImageBusiness.update(_id, classifiedImage, (error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send({ 'success': 'success' });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    delete(req, res) {
        try {
            const _id = req.params._id;
            const classifiedImageBusiness = new ClassifiedImageBusiness();
            classifiedImageBusiness.delete(_id, (error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send({ 'success': 'success' });
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    retrieve(req, res) {
        try {
            const classifiedImageBusiness = new ClassifiedImageBusiness();
            classifiedImageBusiness.retrieve((error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send(result);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    findById(req, res) {
        try {
            const _id = req.params._id;
            const classifiedImageBusiness = new ClassifiedImageBusiness();
            classifiedImageBusiness.findById(_id, (error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.send(result);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
    findImageFileById(req, res) {
        try {
            const _id = req.params._id;
            console.log('looking for id: ', _id);
            const classifiedImageBusiness = new ClassifiedImageBusiness();
            classifiedImageBusiness.findById(_id, (error, result) => {
                if (error) {
                    res.send({ 'error': 'error' });
                }
                else {
                    res.set('Content-Type', result.img.content_type);
                    res.send(result.img.data);
                }
            });
        }
        catch (e) {
            console.log(e);
            res.send({ 'error': 'error in your request' });
        }
    }
}
module.exports = ClassifiedImageController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
